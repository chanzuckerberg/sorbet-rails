# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/database_cleaner/all/database_cleaner.rbi
#
# database_cleaner-1.8.5

module DatabaseCleaner
  def called_externally?(file, caller); end
  def deprecate(message); end
  def self.[](*args, &block); end
  def self.add_cleaner(*args, &block); end
  def self.allow_production; end
  def self.allow_production=(arg0); end
  def self.allow_remote_database_url; end
  def self.allow_remote_database_url=(arg0); end
  def self.app_root(*args, &block); end
  def self.app_root=(*args, &block); end
  def self.called_externally?(file, caller); end
  def self.can_detect_orm?; end
  def self.clean!(*args, &block); end
  def self.clean(*args, &block); end
  def self.clean_with!(*args, &block); end
  def self.clean_with(*args, &block); end
  def self.cleaners(*args, &block); end
  def self.cleaners=(*args, &block); end
  def self.cleaning(*args, &block); end
  def self.configuration; end
  def self.connections(*args, &block); end
  def self.deprecate(message); end
  def self.init_cleaners(*args, &block); end
  def self.logger(*args, &block); end
  def self.logger=(*args, &block); end
  def self.orm=(*args, &block); end
  def self.remove_duplicates(*args, &block); end
  def self.start(*args, &block); end
  def self.strategy=(*args, &block); end
  def self.url_whitelist; end
  def self.url_whitelist=(arg0); end
end
class DatabaseCleaner::Deprecator
  def deprecate(method, message); end
  def initialize; end
end
class DatabaseCleaner::NullStrategy
  def clean; end
  def cleaning(&block); end
  def db=(connection); end
  def start; end
end
class DatabaseCleaner::Safeguard
  def run; end
end
class DatabaseCleaner::Safeguard::Error < Exception
end
class DatabaseCleaner::Safeguard::Error::RemoteDatabaseUrl < DatabaseCleaner::Safeguard::Error
  def initialize; end
end
class DatabaseCleaner::Safeguard::Error::ProductionEnv < DatabaseCleaner::Safeguard::Error
  def initialize(env); end
end
class DatabaseCleaner::Safeguard::Error::NotWhitelistedUrl < DatabaseCleaner::Safeguard::Error
  def initialize; end
end
class DatabaseCleaner::Safeguard::WhitelistedUrl
  def database_url_not_whitelisted?; end
  def run; end
  def skip?; end
end
class DatabaseCleaner::Safeguard::RemoteDatabaseUrl
  def given?; end
  def remote?(url); end
  def run; end
  def skip?; end
end
class DatabaseCleaner::Safeguard::Production
  def given?; end
  def key; end
  def run; end
  def skip?; end
end
class DatabaseCleaner::ORMAutodetector
  def autodetected?; end
  def autodetected_orm; end
  def no_orm_detected_error; end
  def orm; end
end
class DatabaseCleaner::Base
  def <=>(other); end
  def adapter_loaded?(orm); end
  def auto_detected?; end
  def autodetect_orm; end
  def clean!; end
  def clean(*args, &block); end
  def clean_with!; end
  def clean_with(*args); end
  def cleaning(*args, &block); end
  def create_strategy(*args); end
  def db; end
  def db=(desired_db); end
  def initialize(desired_orm = nil, opts = nil); end
  def load_adapter(orm); end
  def orm; end
  def orm=(desired_orm); end
  def orm_module; end
  def orm_strategy(strategy); end
  def require_orm_strategy(orm, strategy); end
  def set_strategy_db(strategy, desired_db); end
  def start(*args, &block); end
  def strategy; end
  def strategy=(args); end
  def strategy_db=(desired_db); end
  extend Forwardable
  include Comparable
end
class DatabaseCleaner::NoORMDetected < StandardError
end
class DatabaseCleaner::UnknownStrategySpecified < ArgumentError
end
class DatabaseCleaner::Cleaners < Hash
  def [](orm, opts = nil); end
  def add_cleaner(orm, opts = nil); end
  def orm=(orm); end
  def remove_duplicates; end
  def strategy=(strategy); end
end
class DatabaseCleaner::Configuration
  def [](*args, &block); end
  def add_cleaner(orm, opts = nil); end
  def app_root; end
  def app_root=(value); end
  def clean!; end
  def clean; end
  def clean_with!(*args); end
  def clean_with(*args); end
  def cleaners; end
  def cleaners=(arg0); end
  def cleaning(&inner_block); end
  def connections; end
  def init_cleaners; end
  def initialize; end
  def logger; end
  def logger=(value); end
  def orm=(*args, &block); end
  def remove_duplicates; end
  def start; end
  def strategy=(*args, &block); end
  extend Forwardable
end
