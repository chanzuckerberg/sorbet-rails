# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activesupport/all/activesupport.rbi
#
# activesupport-4.2.11
class Array
  def as_json(options = nil); end
  def blank?; end
  def deep_dup; end
  def extract_options!; end
  def fifth; end
  def forty_two; end
  def fourth; end
  def from(position); end
  def in_groups(number, fill_with = nil); end
  def in_groups_of(number, fill_with = nil); end
  def second; end
  def self.try_convert(arg0); end
  def split(value = nil); end
  def third; end
  def to(position); end
  def to_default_s; end
  def to_formatted_s(format = nil); end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
  def to_param; end
  def to_query(key); end
  def to_sentence(options = nil); end
  def to_xml(options = nil); end
end
class Hash
  def _deep_transform_keys_in_object!(object, &block); end
  def _deep_transform_keys_in_object(object, &block); end
  def as_json(options = nil); end
  def assert_valid_keys(*valid_keys); end
  def blank?; end
  def deep_dup; end
  def deep_merge!(other_hash, &block); end
  def deep_merge(other_hash, &block); end
  def deep_stringify_keys!; end
  def deep_stringify_keys; end
  def deep_symbolize_keys!; end
  def deep_symbolize_keys; end
  def deep_transform_keys!(&block); end
  def deep_transform_keys(&block); end
  def except!(*keys); end
  def except(*keys); end
  def extract!(*keys); end
  def extractable_options?; end
  def nested_under_indifferent_access; end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def reverse_update(other_hash); end
  def self.from_xml(xml, disallowed_types = nil); end
  def self.try_convert(arg0); end
  def slice!(*keys); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys!; end
  def symbolize_keys; end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
  def to_options!; end
  def to_options; end
  def to_param(namespace = nil); end
  def to_query(namespace = nil); end
  def to_xml(options = nil); end
  def with_indifferent_access; end
end
module ActiveSupport
  def parse_json_times; end
  def parse_json_times=(obj); end
  def self.eager_load!; end
  def self.encode_big_decimal_as_string(*args, &block); end
  def self.encode_big_decimal_as_string=(arg); end
  def self.escape_html_entities_in_json(*args, &block); end
  def self.escape_html_entities_in_json=(arg); end
  def self.execute_hook(base, options, block); end
  def self.gem_version; end
  def self.json_encoder(*args, &block); end
  def self.json_encoder=(arg); end
  def self.on_load(name, options = nil, &block); end
  def self.parse_json_times; end
  def self.parse_json_times=(obj); end
  def self.run_load_hooks(name, base = nil); end
  def self.test_order; end
  def self.test_order=(new_order); end
  def self.time_precision(*args, &block); end
  def self.time_precision=(arg); end
  def self.to_time_preserves_timezone; end
  def self.to_time_preserves_timezone=(value); end
  def self.use_standard_json_time_format(*args, &block); end
  def self.use_standard_json_time_format=(arg); end
  def self.version; end
  extend ActiveSupport::Autoload
end
module ActiveSupport::Inflector
  def apply_inflections(word, rules); end
  def camelize(term, uppercase_first_letter = nil); end
  def classify(table_name); end
  def const_regexp(camel_cased_word); end
  def constantize(camel_cased_word); end
  def dasherize(underscored_word); end
  def deconstantize(path); end
  def demodulize(path); end
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = nil); end
  def humanize(lower_case_and_underscored_word, options = nil); end
  def inflections(locale = nil); end
  def ordinal(number); end
  def ordinalize(number); end
  def parameterize(string, sep = nil); end
  def pluralize(word, locale = nil); end
  def safe_constantize(camel_cased_word); end
  def singularize(word, locale = nil); end
  def tableize(class_name); end
  def titleize(word); end
  def transliterate(string, replacement = nil); end
  def underscore(camel_cased_word); end
  extend ActiveSupport::Inflector
  extend ActiveSupport::Inflector
end
class ActiveSupport::Inflector::Inflections
  def acronym(word); end
  def acronym_regex; end
  def acronyms; end
  def clear(scope = nil); end
  def human(rule, replacement); end
  def humans; end
  def initialize; end
  def initialize_dup(orig); end
  def irregular(singular, plural); end
  def plural(rule, replacement); end
  def plurals; end
  def self.instance(locale = nil); end
  def singular(rule, replacement); end
  def singulars; end
  def uncountable(*words); end
  def uncountables; end
end
module ActiveSupport::Autoload
  def autoload(const_name, path = nil); end
  def autoload_at(path); end
  def autoload_under(path); end
  def autoloads; end
  def eager_autoload; end
  def eager_load!; end
  def self.extended(base); end
end
module ActiveSupport::VERSION
end
class Module
  def alias_attribute(new_name, old_name); end
  def alias_method_chain(target, feature); end
  def anonymous?; end
  def attr_internal(*attrs); end
  def attr_internal_accessor(*attrs); end
  def attr_internal_define(attr_name, type); end
  def attr_internal_ivar_name(attr); end
  def attr_internal_reader(*attrs); end
  def attr_internal_writer(*attrs); end
  def cattr_accessor(*syms, &blk); end
  def cattr_reader(*syms); end
  def cattr_writer(*syms); end
  def delegate(*methods); end
  def deprecate(*method_names); end
  def local_constants; end
  def mattr_accessor(*syms, &blk); end
  def mattr_reader(*syms); end
  def mattr_writer(*syms); end
  def methods_transplantable?; end
  def parent; end
  def parent_name; end
  def parents; end
  def qualified_const_defined?(path, search_parents = nil); end
  def qualified_const_get(path); end
  def qualified_const_set(path, value); end
  def reachable?; end
  def redefine_method(method, &block); end
  def remove_possible_method(method); end
  def self.attr_internal_naming_format; end
  def self.attr_internal_naming_format=(arg0); end
  include ActiveSupport::Dependencies::ModuleConstMissing
  include Module::Concerning
end
module ActiveSupport::Concern
  def append_features(base); end
  def class_methods(&class_methods_module_definition); end
  def included(base = nil, &block); end
  def self.extended(base); end
end
class ActiveSupport::Concern::MultipleIncludedBlocks < StandardError
  def initialize; end
end
module LoggerSilence
  def silence(temporary_level = nil); end
  extend ActiveSupport::Concern
end
module ActiveSupport::LoggerThreadSafeLevel
  def after_initialize; end
  def level; end
  def local_level; end
  def local_level=(level); end
  def local_log_id; end
  extend ActiveSupport::Concern
end
class ActiveSupport::Logger < Logger
  def add(severity, message = nil, progname = nil, &block); end
  def debug?; end
  def error?; end
  def fatal?; end
  def info?; end
  def initialize(*args); end
  def self.broadcast(logger); end
  def self.logger_outputs_to?(logger, *sources); end
  def self.silencer; end
  def self.silencer=(obj); end
  def silencer; end
  def silencer=(obj); end
  def unknown?; end
  def warn?; end
  include ActiveSupport::LoggerThreadSafeLevel
  include LoggerSilence
end
class ActiveSupport::Logger::SimpleFormatter < Logger::Formatter
  def call(severity, timestamp, progname, msg); end
end
module DateAndTime
end
module DateAndTime::Compatibility
  def preserve_timezone; end
  def self.preserve_timezone; end
  def self.preserve_timezone=(obj); end
end
module Kernel
  def capture(stream); end
  def class_eval(*args, &block); end
  def concern(topic, &module_definition); end
  def enable_warnings; end
  def quietly; end
  def silence(stream); end
  def silence_stderr; end
  def silence_stream(stream); end
  def silence_warnings; end
  def suppress(*exception_classes); end
  def with_warnings(flag); end
end
class Module::DelegationError < NoMethodError
end
class ActiveSupport::Deprecation
  def self.allocate; end
  def self.behavior(*args, &block); end
  def self.behavior=(arg); end
  def self.debug(*args, &block); end
  def self.debug=(arg); end
  def self.deprecate_methods(*args, &block); end
  def self.deprecation_horizon(*args, &block); end
  def self.deprecation_horizon=(arg); end
  def self.deprecation_warning(*args, &block); end
  def self.gem_name(*args, &block); end
  def self.gem_name=(arg); end
  def self.initialize(*args, &block); end
  def self.instance; end
  def self.new(*arg0); end
  def self.silence(*args, &block); end
  def self.silenced(*args, &block); end
  def self.silenced=(arg); end
  def self.warn(*args, &block); end
  extend ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  extend Singleton::SingletonClassMethods
  include ActiveSupport::Deprecation::Behavior
  include ActiveSupport::Deprecation::InstanceDelegator
  include ActiveSupport::Deprecation::MethodWrapper
  include ActiveSupport::Deprecation::Reporting
  include Singleton
end
module ActiveSupport::Deprecation::InstanceDelegator
  def self.included(base); end
end
module ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  def include(included_module); end
  def method_added(method_name); end
end
module ActiveSupport::Notifications
  def self.instrument(name, payload = nil); end
  def self.instrumenter; end
  def self.notifier; end
  def self.notifier=(arg0); end
  def self.publish(name, *args); end
  def self.subscribe(*args, &block); end
  def self.subscribed(callback, *args, &block); end
  def self.unsubscribe(subscriber_or_name); end
end
class ActiveSupport::Notifications::Instrumenter
  def finish(name, payload); end
  def id; end
  def initialize(notifier); end
  def instrument(name, payload = nil); end
  def start(name, payload); end
  def unique_id; end
end
class ActiveSupport::Notifications::Event
  def <<(event); end
  def children; end
  def duration; end
  def end; end
  def end=(arg0); end
  def initialize(name, start, ending, transaction_id, payload); end
  def name; end
  def parent_of?(event); end
  def payload; end
  def time; end
  def transaction_id; end
end
class ActiveSupport::Notifications::Fanout
  def finish(name, id, payload); end
  def initialize; end
  def listeners_for(name); end
  def listening?(name); end
  def lock; end
  def locked?; end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribe(pattern = nil, block = nil); end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
  def unsubscribe(subscriber_or_name); end
  def wait; end
  include Mutex_m
end
module ActiveSupport::Notifications::Fanout::Subscribers
  def self.new(pattern, listener); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def initialize(pattern, delegate); end
  def matches?(name); end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribed_to?(name); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Timed < ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def publish(name, *args); end
  def start(name, id, payload); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::AllMessages
  def finish(name, id, payload); end
  def initialize(delegate); end
  def matches?(arg0); end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribed_to?(name); end
end
module ActiveSupport::PerThreadRegistry
  def instance; end
  def method_missing(name, *args, &block); end
  def self.extended(object); end
end
class ActiveSupport::Notifications::InstrumentationRegistry
  def initialize; end
  def instrumenter_for(notifier); end
  extend ActiveSupport::PerThreadRegistry
end
class ActiveSupport::DeprecationException < StandardError
end
module ActiveSupport::Deprecation::Behavior
  def behavior; end
  def behavior=(behavior); end
  def debug; end
  def debug=(arg0); end
end
module ActiveSupport::Deprecation::Reporting
  def deprecated_method_warning(method_name, message = nil); end
  def deprecation_caller_message(callstack); end
  def deprecation_message(callstack, message = nil); end
  def deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def extract_callstack(callstack); end
  def gem_name; end
  def gem_name=(arg0); end
  def silence; end
  def silenced; end
  def silenced=(arg0); end
  def warn(message = nil, callstack = nil); end
end
module ActiveSupport::Deprecation::MethodWrapper
  def deprecate_methods(target_module, *method_names); end
end
class ActiveSupport::Deprecation::DeprecationProxy
  def inspect; end
  def method_missing(called, *args, &block); end
  def self.new(*args, &block); end
end
class ActiveSupport::Deprecation::DeprecatedObjectProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(object, message, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(instance, method, var = nil, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedConstantProxy < ActiveSupport::Deprecation::DeprecationProxy
  def class; end
  def initialize(old_const, new_const, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class Object < BasicObject
  def `(command); end
  def acts_like?(duck); end
  def as_json(options = nil); end
  def blank?; end
  def deep_dup; end
  def duplicable?; end
  def html_safe?; end
  def in?(another_object); end
  def instance_values; end
  def instance_variable_names; end
  def presence; end
  def presence_in(another_object); end
  def present?; end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
  def to_param; end
  def to_query(key); end
  def try!(*a, &b); end
  def try(*a, &b); end
  def with_options(options, &block); end
  include ActiveSupport::Dependencies::Loadable
end
class NilClass
  def as_json(options = nil); end
  def blank?; end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
  def to_param; end
  def try!(*args); end
  def try(*args); end
end
class FalseClass
  def as_json(options = nil); end
  def blank?; end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
  def to_param; end
end
class TrueClass
  def as_json(options = nil); end
  def blank?; end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
  def to_param; end
end
class String
  def acts_like_string?; end
  def as_json(options = nil); end
  def at(position); end
  def blank?; end
  def camelcase(first_letter = nil); end
  def camelize(first_letter = nil); end
  def classify; end
  def constantize; end
  def dasherize; end
  def deconstantize; end
  def demodulize; end
  def ends_with?(*arg0); end
  def exclude?(string); end
  def first(limit = nil); end
  def foreign_key(separate_class_name_and_id_with_underscore = nil); end
  def from(position); end
  def html_safe; end
  def humanize(options = nil); end
  def in_time_zone(zone = nil); end
  def indent!(amount, indent_string = nil, indent_empty_lines = nil); end
  def indent(amount, indent_string = nil, indent_empty_lines = nil); end
  def inquiry; end
  def is_utf8?; end
  def last(limit = nil); end
  def mb_chars; end
  def parameterize(sep = nil); end
  def pluralize(count = nil, locale = nil); end
  def remove!(*patterns); end
  def remove(*patterns); end
  def safe_constantize; end
  def singularize(locale = nil); end
  def squish!; end
  def squish; end
  def starts_with?(*arg0); end
  def strip_heredoc; end
  def tableize; end
  def titlecase; end
  def titleize; end
  def to(position); end
  def to_date; end
  def to_datetime; end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
  def to_time(form = nil); end
  def truncate(truncate_at, options = nil); end
  def truncate_words(words_count, options = nil); end
  def underscore; end
end
class Numeric
  def as_json(options = nil); end
  def blank?; end
  def byte; end
  def bytes; end
  def day; end
  def days; end
  def exabyte; end
  def exabytes; end
  def fortnight; end
  def fortnights; end
  def gigabyte; end
  def gigabytes; end
  def hour; end
  def hours; end
  def html_safe?; end
  def in_milliseconds; end
  def kilobyte; end
  def kilobytes; end
  def megabyte; end
  def megabytes; end
  def minute; end
  def minutes; end
  def petabyte; end
  def petabytes; end
  def second; end
  def seconds; end
  def terabyte; end
  def terabytes; end
  def to_formatted_s(format = nil, options = nil); end
  def week; end
  def weeks; end
end
class ActiveSupport::KeyGenerator
  def generate_key(salt, key_size = nil); end
  def initialize(secret, options = nil); end
end
class ActiveSupport::CachingKeyGenerator
  def generate_key(salt, key_size = nil); end
  def initialize(key_generator); end
end
class ActiveSupport::LegacyKeyGenerator
  def ensure_secret_secure(secret); end
  def generate_key(salt); end
  def initialize(secret); end
end
module ActiveSupport::SecurityUtils
  def secure_compare(a, b); end
  def self.secure_compare(a, b); end
  def self.variable_size_secure_compare(a, b); end
  def variable_size_secure_compare(a, b); end
end
class ActiveSupport::MessageVerifier
  def decode(data); end
  def encode(data); end
  def generate(value); end
  def generate_digest(data); end
  def initialize(secret, options = nil); end
  def verify(signed_message); end
end
class ActiveSupport::MessageVerifier::InvalidSignature < StandardError
end
class ActiveSupport::OrderedOptions < Hash
  def [](key); end
  def []=(key, value); end
  def _get(arg0); end
  def method_missing(name, *args); end
  def respond_to_missing?(name, include_private); end
end
class ActiveSupport::InheritableOptions < ActiveSupport::OrderedOptions
  def inheritable_copy; end
  def initialize(parent = nil); end
end
class Symbol
  def as_json(options = nil); end
end
class BigDecimal < Numeric
  def _original_to_s(*arg0); end
  def as_json(options = nil); end
  def duplicable?; end
  def to_default_s(*args); end
  def to_formatted_s(*args); end
end
class Method
  def duplicable?; end
end
module ActiveSupport::Multibyte
  def self.proxy_class; end
  def self.proxy_class=(klass); end
end
class DateTime < Date
  def <=>(other); end
  def acts_like_date?; end
  def acts_like_time?; end
  def advance(options); end
  def ago(seconds); end
  def as_json(options = nil); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def change(options); end
  def default_inspect; end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmtime; end
  def in(seconds); end
  def inspect; end
  def localtime(utc_offset = nil); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def noon; end
  def nsec; end
  def offset_in_seconds; end
  def readable_inspect; end
  def seconds_since_midnight; end
  def seconds_since_unix_epoch; end
  def seconds_until_end_of_day; end
  def self.civil_from_format(utc_or_local, year, month = nil, day = nil, hour = nil, min = nil, sec = nil); end
  def self.current; end
  def since(seconds); end
  def subsec; end
  def to_default_s; end
  def to_f; end
  def to_formatted_s(format = nil); end
  def to_i; end
  def usec; end
  def utc; end
  def utc?; end
  def utc_offset; end
  include DateAndTime::Compatibility
  include DateAndTime::Zones
end
module ActiveSupport::XmlMini_REXML
  def collapse(element, depth); end
  def empty_content?(element); end
  def get_attributes(element); end
  def merge!(hash, key, value); end
  def merge_element!(hash, element, depth); end
  def merge_texts!(hash, element); end
  def parse(data); end
  extend ActiveSupport::XmlMini_REXML
end
module ActiveSupport::XmlMini
  def _dasherize(key); end
  def _parse_binary(bin, entity); end
  def _parse_file(file, entity); end
  def backend; end
  def backend=(name); end
  def cast_backend_name_to_module(name); end
  def current_thread_backend; end
  def current_thread_backend=(name); end
  def depth; end
  def depth=(arg0); end
  def parse(*args, &block); end
  def rename_key(key, options = nil); end
  def to_tag(key, value, options); end
  def with_backend(name); end
  extend ActiveSupport::XmlMini
end
module ActiveSupport::XmlMini::FileLike
  def content_type; end
  def content_type=(arg0); end
  def original_filename; end
  def original_filename=(arg0); end
end
class Time
  def acts_like_time?; end
  def advance(options); end
  def ago(seconds); end
  def all_day; end
  def as_json(options = nil); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def change(options); end
  def compare_with_coercion(other); end
  def compare_without_coercion(arg0); end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def eql_with_coercion(other); end
  def eql_without_coercion(arg0); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def in(seconds); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def minus_with_coercion(other); end
  def minus_with_duration(other); end
  def minus_without_coercion(other); end
  def minus_without_duration(arg0); end
  def noon; end
  def plus_with_duration(other); end
  def plus_without_duration(arg0); end
  def sec_fraction; end
  def seconds_since_midnight; end
  def seconds_until_end_of_day; end
  def self.===(other); end
  def self.at_with_coercion(*args); end
  def self.at_without_coercion(*arg0); end
  def self.current; end
  def self.days_in_month(month, year = nil); end
  def self.find_zone!(time_zone); end
  def self.find_zone(time_zone); end
  def self.use_zone(time_zone); end
  def self.zone; end
  def self.zone=(time_zone); end
  def self.zone_default; end
  def self.zone_default=(arg0); end
  def since(seconds); end
  def to_default_s; end
  def to_formatted_s(format = nil); end
  include DateAndTime::Calculations
  include DateAndTime::Compatibility
  include DateAndTime::Zones
end
class ActiveSupport::Duration
  def +(other); end
  def -(other); end
  def -@; end
  def <=>(*args, &block); end
  def ==(other); end
  def ===(other); end
  def ago(time = nil); end
  def as_json(options = nil); end
  def eql?(other); end
  def from_now(time = nil); end
  def hash; end
  def initialize(value, parts); end
  def inspect; end
  def instance_of?(klass); end
  def is_a?(klass); end
  def kind_of?(klass); end
  def method_missing(method, *args, &block); end
  def parts; end
  def parts=(arg0); end
  def respond_to_missing?(method, include_private = nil); end
  def self.===(other); end
  def since(time = nil); end
  def sum(sign, time = nil); end
  def to_i; end
  def to_s; end
  def until(time = nil); end
  def value; end
  def value=(arg0); end
end
class ActiveSupport::TimeZone
  def <=>(zone); end
  def =~(re); end
  def at(secs); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def init_with(coder); end
  def initialize(name, utc_offset = nil, tzinfo = nil); end
  def local(*args); end
  def local_to_utc(time, dst = nil); end
  def name; end
  def now; end
  def parse(str, now = nil); end
  def period_for_local(time, dst = nil); end
  def period_for_utc(time); end
  def periods_for_local(time); end
  def self.[](arg); end
  def self.all; end
  def self.create(*arg0); end
  def self.find_tzinfo(name); end
  def self.new(name); end
  def self.seconds_to_utc_offset(seconds, colon = nil); end
  def self.us_zones; end
  def self.zones_map; end
  def time_now; end
  def to_s; end
  def today; end
  def tomorrow; end
  def tzinfo; end
  def utc_offset; end
  def utc_to_local(time); end
  def yesterday; end
  include Comparable
end
class ActiveSupport::TimeWithZone
  def +(other); end
  def -(other); end
  def <=>(other); end
  def acts_like_time?; end
  def advance(options); end
  def ago(other); end
  def as_json(options = nil); end
  def between?(min, max); end
  def comparable_time; end
  def day; end
  def dst?; end
  def duration_of_variable_length?(obj); end
  def encode_with(coder); end
  def eql?(other); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def freeze; end
  def future?; end
  def get_period_and_ensure_valid_local_time(period); end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmt?; end
  def gmt_offset; end
  def gmtime; end
  def gmtoff; end
  def hash; end
  def hour; end
  def httpdate; end
  def in(other); end
  def in_time_zone(new_zone = nil); end
  def init_with(coder); end
  def initialize(utc_time, time_zone, local_time = nil, period = nil); end
  def inspect; end
  def is_a?(klass); end
  def isdst; end
  def iso8601(fraction_digits = nil); end
  def kind_of?(klass); end
  def localtime(utc_offset = nil); end
  def marshal_dump; end
  def marshal_load(variables); end
  def mday; end
  def method_missing(sym, *args, &block); end
  def min; end
  def mon; end
  def month; end
  def nsec; end
  def past?; end
  def period; end
  def respond_to?(sym, include_priv = nil); end
  def respond_to_missing?(sym, include_priv); end
  def rfc2822; end
  def rfc822; end
  def sec; end
  def self.name; end
  def since(other); end
  def strftime(format); end
  def time; end
  def time_zone; end
  def to_a; end
  def to_date; end
  def to_datetime; end
  def to_f; end
  def to_formatted_s(format = nil); end
  def to_i; end
  def to_r; end
  def to_s(format = nil); end
  def to_time; end
  def today?; end
  def transfer_time_values_to_utc_constructor(time); end
  def tv_sec; end
  def usec; end
  def utc; end
  def utc?; end
  def utc_offset; end
  def wday; end
  def wrap_with_time_zone(time); end
  def xmlschema(fraction_digits = nil); end
  def yday; end
  def year; end
  def zone; end
  include Comparable
end
module DateAndTime::Zones
  def in_time_zone(zone = nil); end
  def time_with_zone(time, zone); end
end
module DateAndTime::Calculations
  def all_month; end
  def all_quarter; end
  def all_week(start_day = nil); end
  def all_year; end
  def at_beginning_of_month; end
  def at_beginning_of_quarter; end
  def at_beginning_of_week(start_day = nil); end
  def at_beginning_of_year; end
  def at_end_of_month; end
  def at_end_of_quarter; end
  def at_end_of_week(start_day = nil); end
  def at_end_of_year; end
  def beginning_of_month; end
  def beginning_of_quarter; end
  def beginning_of_week(start_day = nil); end
  def beginning_of_year; end
  def days_ago(days); end
  def days_since(days); end
  def days_span(day); end
  def days_to_week_start(start_day = nil); end
  def end_of_month; end
  def end_of_quarter; end
  def end_of_week(start_day = nil); end
  def end_of_year; end
  def first_hour(date_or_time); end
  def future?; end
  def last_hour(date_or_time); end
  def last_month; end
  def last_quarter; end
  def last_week(start_day = nil); end
  def last_year; end
  def monday; end
  def months_ago(months); end
  def months_since(months); end
  def next_month; end
  def next_quarter; end
  def next_week(given_day_in_next_week = nil); end
  def next_year; end
  def past?; end
  def prev_month; end
  def prev_quarter; end
  def prev_week(start_day = nil); end
  def prev_year; end
  def sunday; end
  def today?; end
  def tomorrow; end
  def weeks_ago(weeks); end
  def weeks_since(weeks); end
  def years_ago(years); end
  def years_since(years); end
  def yesterday; end
end
class Date
  def acts_like_date?; end
  def advance(options); end
  def ago(seconds); end
  def as_json(options = nil); end
  def at_beginning_of_day; end
  def at_end_of_day; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def change(options); end
  def compare_with_coercion(other); end
  def compare_without_coercion(arg0); end
  def default_inspect; end
  def end_of_day; end
  def in(seconds); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def minus_with_duration(other); end
  def minus_without_duration(arg0); end
  def noon; end
  def plus_with_duration(other); end
  def plus_without_duration(arg0); end
  def readable_inspect; end
  def self.beginning_of_week; end
  def self.beginning_of_week=(week_start); end
  def self.beginning_of_week_default; end
  def self.beginning_of_week_default=(arg0); end
  def self.current; end
  def self.find_beginning_of_week!(week_start); end
  def self.tomorrow; end
  def self.yesterday; end
  def since(seconds); end
  def to_default_s; end
  def to_formatted_s(format = nil); end
  include DateAndTime::Calculations
  include DateAndTime::Zones
end
class Integer < Numeric
  def month; end
  def months; end
  def multiple_of?(number); end
  def ordinal; end
  def ordinalize; end
  def to_default_s(*arg0); end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
  def year; end
  def years; end
end
class ActiveSupport::XMLConverter
  def become_array?(value); end
  def become_content?(value); end
  def become_empty_string?(value); end
  def become_hash?(value); end
  def deep_to_h(value); end
  def garbage?(value); end
  def initialize(xml, disallowed_types = nil); end
  def normalize_keys(params); end
  def nothing?(value); end
  def process_array(value); end
  def process_content(value); end
  def process_hash(value); end
  def to_h; end
end
class ActiveSupport::XMLConverter::DisallowedType < StandardError
  def initialize(type); end
end
module Enumerable
  def as_json(options = nil); end
  def exclude?(object); end
  def index_by; end
  def many?; end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
end
class Float < Numeric
  def as_json(options = nil); end
  def to_default_s; end
  def to_json(options = nil); end
  def to_json_with_active_support_encoder(options = nil); end
  def to_json_without_active_support_encoder(*arg0); end
end
class Struct
  def as_json(options = nil); end
end
class Regexp
  def as_json(options = nil); end
  def multiline?; end
end
class Range
  def as_json(options = nil); end
  def each_with_time_with_zone(&block); end
  def each_without_time_with_zone; end
  def ensure_iteration_allowed; end
  def include_with_range?(value); end
  def include_without_range?(arg0); end
  def overlaps?(other); end
  def step_with_time_with_zone(n = nil, &block); end
  def step_without_time_with_zone(*arg0); end
  def sum(identity = nil); end
  def to_default_s; end
  def to_formatted_s(format = nil); end
end
class Process::Status
  def as_json(options = nil); end
end
class ActiveSupport::OptionMerger
  def initialize(context, options); end
  def method_missing(method, *arguments, &block); end
end
class ActiveSupport::FileUpdateChecker
  def compile_ext(array); end
  def compile_glob(hash); end
  def escape(key); end
  def execute; end
  def execute_if_updated; end
  def initialize(files, dirs = nil, &block); end
  def max_mtime(paths); end
  def updated?; end
  def updated_at(paths); end
  def watched; end
end
module I18n
end
class I18n::Railtie < Rails::Railtie
  def self.include_fallbacks_module; end
  def self.init_fallbacks(fallbacks); end
  def self.initialize_i18n(app); end
  def self.validate_fallbacks(fallbacks); end
end
class ActiveSupport::Railtie < Rails::Railtie
end
class Class < Module
  def _stash_object_in_method(object, method, instance_reader = nil); end
  def _superclass_delegating_accessor(name, options = nil); end
  def class_attribute(*attrs); end
  def descendants; end
  def subclasses; end
  def superclass_delegating_accessor(*args, &block); end
  def superclass_delegating_accessor_with_deprecation(*args, &block); end
  def superclass_delegating_accessor_without_deprecation(name, options = nil); end
end
class ActiveSupport::HashWithIndifferentAccess < Hash
  def []=(key, value); end
  def compact; end
  def convert_key(key); end
  def convert_value(value, options = nil); end
  def deep_stringify_keys!; end
  def deep_stringify_keys; end
  def deep_symbolize_keys; end
  def default(key = nil); end
  def delete(key); end
  def dup; end
  def extractable_options?; end
  def fetch(key, *extras); end
  def has_key?(key); end
  def include?(key); end
  def initialize(constructor = nil); end
  def key?(key); end
  def member?(key); end
  def merge!(other_hash); end
  def merge(hash, &block); end
  def nested_under_indifferent_access; end
  def regular_update(arg0); end
  def regular_writer(arg0, arg1); end
  def reject(*args, &block); end
  def replace(other_hash); end
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def select(*args, &block); end
  def self.[](*args); end
  def self.new_from_hash_copying_default(hash); end
  def set_defaults(target); end
  def store(key, value); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys; end
  def to_hash; end
  def to_options!; end
  def transform_values(*args, &block); end
  def update(other_hash); end
  def values_at(*indices); end
  def with_indifferent_access; end
end
module Benchmark
  def self.ms; end
end
module ActiveSupport::JSON
  def self.convert_dates_from(data); end
  def self.decode(json, options = nil); end
  def self.encode(value, options = nil); end
  def self.parse_error; end
end
module ActiveSupport::JSON::Encoding
  def self.const_missing(name); end
  def self.encode_big_decimal_as_string; end
  def self.encode_big_decimal_as_string=(as_string); end
  def self.escape_html_entities_in_json; end
  def self.escape_html_entities_in_json=(arg0); end
  def self.json_encoder; end
  def self.json_encoder=(arg0); end
  def self.time_precision; end
  def self.time_precision=(arg0); end
  def self.use_standard_json_time_format; end
  def self.use_standard_json_time_format=(arg0); end
end
class ActiveSupport::JSON::Encoding::JSONGemEncoder
  def encode(value); end
  def initialize(options = nil); end
  def jsonify(value); end
  def options; end
  def stringify(jsonified); end
end
class ActiveSupport::JSON::Encoding::JSONGemEncoder::EscapedString < String
  def to_json(*arg0); end
  def to_s; end
end
class ActiveSupport::Multibyte::Chars
  def <=>(*args, &block); end
  def =~(*args, &block); end
  def acts_like_string?(*args, &block); end
  def as_json(options = nil); end
  def capitalize!(*args); end
  def capitalize; end
  def chars(string); end
  def compose; end
  def decompose; end
  def downcase!(*args); end
  def downcase; end
  def grapheme_length; end
  def initialize(string); end
  def limit(limit); end
  def method_missing(method, *args, &block); end
  def normalize(form = nil); end
  def respond_to_missing?(method, include_private); end
  def reverse!(*args); end
  def reverse; end
  def self.consumes?(string); end
  def slice!(*args); end
  def split(*args); end
  def swapcase; end
  def tidy_bytes!(*args); end
  def tidy_bytes(force = nil); end
  def titlecase; end
  def titleize; end
  def to_s; end
  def to_str; end
  def translate_offset(byte_offset); end
  def upcase!(*args); end
  def upcase; end
  def wrapped_string; end
  include Comparable
end
module ActiveSupport::DescendantsTracker
  def descendants; end
  def direct_descendants; end
  def inherited(base); end
  def self.accumulate_descendants(klass, acc); end
  def self.clear; end
  def self.descendants(klass); end
  def self.direct_descendants(klass); end
  def self.store_inherited(klass, descendant); end
end
module ActiveSupport::Callbacks
  def __run_callbacks__(callbacks, &block); end
  def halted_callback_hook(filter); end
  def run_callbacks(kind, &block); end
  extend ActiveSupport::Concern
end
module ActiveSupport::Callbacks::Conditionals
end
class ActiveSupport::Callbacks::Conditionals::Value
  def call(target, value); end
  def initialize(&block); end
end
module ActiveSupport::Callbacks::Filters
end
class ActiveSupport::Callbacks::Filters::Environment < Struct
  def halted; end
  def halted=(_); end
  def run_block; end
  def run_block=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def target; end
  def target=(_); end
  def value; end
  def value=(_); end
end
class ActiveSupport::Callbacks::Filters::End
  def call(env); end
end
class ActiveSupport::Callbacks::Filters::Before
  def self.build(callback_sequence, user_callback, user_conditions, chain_config, filter); end
  def self.conditional(callback_sequence, user_callback, user_conditions); end
  def self.halting(callback_sequence, user_callback, halted_lambda, filter); end
  def self.halting_and_conditional(callback_sequence, user_callback, user_conditions, halted_lambda, filter); end
  def self.simple(callback_sequence, user_callback); end
end
class ActiveSupport::Callbacks::Filters::After
  def self.build(callback_sequence, user_callback, user_conditions, chain_config); end
  def self.conditional(callback_sequence, user_callback, user_conditions); end
  def self.halting(callback_sequence, user_callback); end
  def self.halting_and_conditional(callback_sequence, user_callback, user_conditions); end
  def self.simple(callback_sequence, user_callback); end
end
class ActiveSupport::Callbacks::Filters::Around
  def self.build(callback_sequence, user_callback, user_conditions, chain_config); end
  def self.conditional(callback_sequence, user_callback, user_conditions); end
  def self.halting(callback_sequence, user_callback); end
  def self.halting_and_conditional(callback_sequence, user_callback, user_conditions); end
  def self.simple(callback_sequence, user_callback); end
end
class ActiveSupport::Callbacks::Callback
  def apply(callback_sequence); end
  def chain_config; end
  def compute_identifier(filter); end
  def conditions_lambdas; end
  def duplicates?(other); end
  def filter; end
  def initialize(name, filter, kind, options, chain_config); end
  def invert_lambda(l); end
  def kind; end
  def kind=(arg0); end
  def make_lambda(filter); end
  def matches?(_kind, _filter); end
  def merge(chain, new_options); end
  def name; end
  def name=(arg0); end
  def raw_filter; end
  def self.build(chain, filter, kind, options); end
end
class ActiveSupport::Callbacks::CallbackSequence
  def after(&after); end
  def around(&around); end
  def before(&before); end
  def call(*args); end
  def initialize(&call); end
end
class ActiveSupport::Callbacks::CallbackChain
  def append(*callbacks); end
  def append_one(callback); end
  def chain; end
  def clear; end
  def compile; end
  def config; end
  def delete(o); end
  def each(&block); end
  def empty?; end
  def index(o); end
  def initialize(name, config); end
  def initialize_copy(other); end
  def insert(index, o); end
  def name; end
  def prepend(*callbacks); end
  def prepend_one(callback); end
  def remove_duplicates(callback); end
  include Enumerable
end
module ActiveSupport::Callbacks::ClassMethods
  def __update_callbacks(name); end
  def define_callbacks(*names); end
  def get_callbacks(name); end
  def normalize_callback_params(filters, block); end
  def reset_callbacks(name); end
  def set_callback(name, *filter_list, &block); end
  def set_callbacks(name, callbacks); end
  def skip_callback(name, *filter_list, &block); end
end
module ActiveSupport::Rescuable
  def handler_for_rescue(exception); end
  def rescue_with_handler(exception); end
  extend ActiveSupport::Concern
end
module ActiveSupport::Rescuable::ClassMethods
  def rescue_from(*klasses, &block); end
end
class LoadError < ScriptError
  def is_missing?(location); end
end
class NameError < StandardError
  def missing_name; end
  def missing_name?(name); end
end
module URI
  def self.parser; end
end
class ERB
end
module ERB::Util
  def html_escape_once(s); end
  def json_escape(s); end
  def self.html_escape_once(s); end
  def self.json_escape(s); end
  def self.unwrapped_html_escape(s); end
  def unwrapped_html_escape(s); end
end
class ActiveSupport::SafeBuffer < String
  def %(args); end
  def +(other); end
  def <<(value); end
  def [](*args); end
  def capitalize!(*args); end
  def capitalize(*args, &block); end
  def chomp!(*args); end
  def chomp(*args, &block); end
  def chop!(*args); end
  def chop(*args, &block); end
  def clone_empty; end
  def concat(value); end
  def delete!(*args); end
  def delete(*args, &block); end
  def downcase!(*args); end
  def downcase(*args, &block); end
  def encode_with(coder); end
  def gsub!(*args); end
  def gsub(*args, &block); end
  def html_escape_interpolated_argument(arg); end
  def html_safe?; end
  def initialize(*arg0); end
  def initialize_copy(other); end
  def lstrip!(*args); end
  def lstrip(*args, &block); end
  def next!(*args); end
  def next(*args, &block); end
  def original_concat(*arg0); end
  def prepend!(value); end
  def prepend(value); end
  def reverse!(*args); end
  def reverse(*args, &block); end
  def rstrip!(*args); end
  def rstrip(*args, &block); end
  def safe_concat(value); end
  def slice!(*args); end
  def slice(*args, &block); end
  def squeeze!(*args); end
  def squeeze(*args, &block); end
  def strip!(*args); end
  def strip(*args, &block); end
  def sub!(*args); end
  def sub(*args, &block); end
  def succ!(*args); end
  def succ(*args, &block); end
  def swapcase!(*args); end
  def swapcase(*args, &block); end
  def to_param; end
  def to_s; end
  def tr!(*args); end
  def tr(*args, &block); end
  def tr_s!(*args); end
  def tr_s(*args, &block); end
  def upcase!(*args); end
  def upcase(*args, &block); end
end
class ActiveSupport::SafeBuffer::SafeConcatError < StandardError
  def initialize; end
end
class ActiveSupport::StringInquirer < String
  def method_missing(method_name, *arguments); end
  def respond_to_missing?(method_name, include_private = nil); end
end
class ActiveSupport::ProxyObject < BasicObject
  def raise(*args); end
end
module ActiveSupport::Cache
  def self.expand_cache_key(key, namespace = nil); end
  def self.lookup_store(*store_option); end
  def self.retrieve_cache_key(key); end
  def self.retrieve_store_class(store); end
end
module ActiveSupport::Cache::Strategy
end
class ActiveSupport::Cache::Store
  def cleanup(options = nil); end
  def clear(options = nil); end
  def decrement(name, amount = nil, options = nil); end
  def delete(name, options = nil); end
  def delete_entry(key, options); end
  def delete_matched(matcher, options = nil); end
  def exist?(name, options = nil); end
  def expanded_key(key); end
  def fetch(name, options = nil); end
  def fetch_multi(*names); end
  def find_cached_entry(key, name, options); end
  def get_entry_value(entry, name, options); end
  def handle_expired_entry(entry, key, options); end
  def increment(name, amount = nil, options = nil); end
  def initialize(options = nil); end
  def instrument(operation, key, options = nil); end
  def key_matcher(pattern, options); end
  def log(operation, key, options = nil); end
  def logger; end
  def logger=(obj); end
  def merged_options(call_options); end
  def mute; end
  def namespaced_key(key, options); end
  def options; end
  def read(name, options = nil); end
  def read_entry(key, options); end
  def read_multi(*names); end
  def save_block_result_to_cache(name, options); end
  def self.instrument; end
  def self.instrument=(boolean); end
  def self.logger; end
  def self.logger=(obj); end
  def silence!; end
  def silence; end
  def silence?; end
  def write(name, value, options = nil); end
  def write_entry(key, entry, options); end
end
class ActiveSupport::Cache::Entry
  def compress(value); end
  def compressed?; end
  def convert_version_4beta1_entry!; end
  def dup_value!; end
  def expired?; end
  def expires_at; end
  def expires_at=(value); end
  def initialize(value, options = nil); end
  def should_compress?(value, options); end
  def size; end
  def uncompress(value); end
  def value; end
end
module QualifiedConstUtils
  def self.names(path); end
  def self.raise_if_absolute(path); end
end
module ActiveSupport::Dependencies
  def autoload_module!(into, const_name, qualified_name, path_suffix); end
  def autoload_once_paths; end
  def autoload_once_paths=(obj); end
  def autoload_paths; end
  def autoload_paths=(obj); end
  def autoloadable_module?(path_suffix); end
  def autoloaded?(desc); end
  def autoloaded_constants; end
  def autoloaded_constants=(obj); end
  def clear; end
  def constant_watch_stack; end
  def constant_watch_stack=(obj); end
  def constantize(name); end
  def depend_on(file_name, message = nil); end
  def explicitly_unloadable_constants; end
  def explicitly_unloadable_constants=(obj); end
  def history; end
  def history=(obj); end
  def hook!; end
  def load?; end
  def load_file(path, const_paths = nil); end
  def load_missing_constant(from_mod, const_name); end
  def load_once_path?(path); end
  def loadable_constants_for_path(path, bases = nil); end
  def loaded; end
  def loaded=(obj); end
  def loading; end
  def loading=(obj); end
  def log(msg); end
  def log_activity; end
  def log_activity=(obj); end
  def log_activity?; end
  def log_call(*args); end
  def logger; end
  def logger=(obj); end
  def mark_for_unload(const_desc); end
  def mechanism; end
  def mechanism=(obj); end
  def new_constants_in(*descs); end
  def qualified_const_defined?(path); end
  def qualified_name_for(mod, name); end
  def reference(klass); end
  def remove_constant(const); end
  def remove_unloadable_constants!; end
  def require_or_load(file_name, const_path = nil); end
  def safe_constantize(name); end
  def search_for_file(path_suffix); end
  def self.autoload_once_paths; end
  def self.autoload_once_paths=(obj); end
  def self.autoload_paths; end
  def self.autoload_paths=(obj); end
  def self.autoloaded_constants; end
  def self.autoloaded_constants=(obj); end
  def self.constant_watch_stack; end
  def self.constant_watch_stack=(obj); end
  def self.explicitly_unloadable_constants; end
  def self.explicitly_unloadable_constants=(obj); end
  def self.history; end
  def self.history=(obj); end
  def self.loaded; end
  def self.loaded=(obj); end
  def self.loading; end
  def self.loading=(obj); end
  def self.log_activity; end
  def self.log_activity=(obj); end
  def self.logger; end
  def self.logger=(obj); end
  def self.mechanism; end
  def self.mechanism=(obj); end
  def self.warnings_on_first_load; end
  def self.warnings_on_first_load=(obj); end
  def to_constant_name(desc); end
  def unhook!; end
  def warnings_on_first_load; end
  def warnings_on_first_load=(obj); end
  def will_unload?(const_desc); end
  extend ActiveSupport::Dependencies
end
class ActiveSupport::Dependencies::WatchStack
  def each(&block); end
  def initialize; end
  def new_constants; end
  def pop_modules(modules); end
  def watch_namespaces(namespaces); end
  def watching?; end
  include Enumerable
end
module ActiveSupport::Dependencies::ModuleConstMissing
  def const_missing(const_name); end
  def guess_for_anonymous(const_name); end
  def self.append_features(base); end
  def self.exclude_from(base); end
  def unloadable(const_desc = nil); end
end
module ActiveSupport::Dependencies::Loadable
  def load(file, wrap = nil); end
  def load_dependency(file); end
  def require(file); end
  def require_dependency(file_name, message = nil); end
  def require_or_load(file_name); end
  def self.exclude_from(base); end
  def unloadable(const_desc); end
end
module ActiveSupport::Dependencies::Blamable
  def blame_file!(file); end
  def blamed_files; end
  def copy_blame!(exc); end
  def describe_blame; end
end
class ActiveSupport::Dependencies::ClassCache
  def [](key); end
  def clear!; end
  def empty?; end
  def get(key); end
  def initialize; end
  def key?(key); end
  def safe_get(key); end
  def store(klass); end
end
class Exception
  include ActiveSupport::Dependencies::Blamable
end
module ActiveSupport::NumberHelper
  def number_to_currency(number, options = nil); end
  def number_to_delimited(number, options = nil); end
  def number_to_human(number, options = nil); end
  def number_to_human_size(number, options = nil); end
  def number_to_percentage(number, options = nil); end
  def number_to_phone(number, options = nil); end
  def number_to_rounded(number, options = nil); end
  extend ActiveSupport::Autoload
  extend ActiveSupport::NumberHelper
end
module Module::Concerning
  def concern(topic, &module_definition); end
  def concerning(topic, &block); end
end
module Marshal
  def self.load_with_autoloading(source, proc = nil); end
  def self.load_without_autoloading(*arg0); end
end
class File < IO
  def self.atomic_write(file_name, temp_dir = nil); end
  def self.empty?(arg0); end
end
module ActiveSupport::TaggedLogging
  def clear_tags!(*args, &block); end
  def flush; end
  def pop_tags(*args, &block); end
  def push_tags(*args, &block); end
  def self.new(logger); end
  def tagged(*tags); end
end
module ActiveSupport::TaggedLogging::Formatter
  def call(severity, timestamp, progname, msg); end
  def clear_tags!; end
  def current_tags; end
  def pop_tags(size = nil); end
  def push_tags(*tags); end
  def tagged(*tags); end
  def tags_text; end
end
class ActiveSupport::Cache::FileStore < ActiveSupport::Cache::Store
  def cache_path; end
  def cleanup(options = nil); end
  def clear(options = nil); end
  def decrement(name, amount = nil, options = nil); end
  def delete_empty_directories(dir); end
  def delete_entry(key, options); end
  def delete_matched(matcher, options = nil); end
  def ensure_cache_path(path); end
  def file_path_key(path); end
  def increment(name, amount = nil, options = nil); end
  def initialize(cache_path, options = nil); end
  def key_file_path(key); end
  def lock_file(file_name, &block); end
  def modify_value(name, amount, options); end
  def read_entry(key, options); end
  def search_dir(dir, &callback); end
  def write_entry(key, entry, options); end
end
module ActiveSupport::Cache::Strategy::LocalCache
  def bypass_local_cache; end
  def cleanup(options = nil); end
  def clear(options = nil); end
  def decrement(name, amount = nil, options = nil); end
  def delete_entry(key, options); end
  def increment(name, amount = nil, options = nil); end
  def local_cache; end
  def local_cache_key; end
  def middleware; end
  def read_entry(key, options); end
  def set_cache_value(value, name, amount, options); end
  def use_temporary_local_cache(temporary_cache); end
  def with_local_cache; end
  def write_entry(key, entry, options); end
end
class ActiveSupport::Cache::Strategy::LocalCache::LocalCacheRegistry
  def cache_for(local_cache_key); end
  def initialize; end
  def self.cache_for(l); end
  def self.set_cache_for(l, v); end
  def set_cache_for(local_cache_key, value); end
  extend ActiveSupport::PerThreadRegistry
end
class ActiveSupport::Cache::Strategy::LocalCache::LocalStore < ActiveSupport::Cache::Store
  def clear(options = nil); end
  def delete_entry(key, options); end
  def initialize; end
  def read_entry(key, options); end
  def synchronize; end
  def write_entry(key, value, options); end
end
class ActiveSupport::Cache::Strategy::LocalCache::Middleware
  def call(env); end
  def initialize(name, local_cache_key); end
  def local_cache_key; end
  def name; end
  def new(app); end
end
class ActiveSupport::Subscriber
  def self.add_event_subscriber(event); end
  def self.attach_to(namespace, subscriber = nil, notifier = nil); end
  def self.method_added(event); end
  def self.namespace; end
  def self.notifier; end
  def self.subscriber; end
  def self.subscribers; end
end
class ActiveSupport::SubscriberQueueRegistry
  def get_queue(queue_key); end
  def initialize; end
  extend ActiveSupport::PerThreadRegistry
end
class ActiveSupport::LogSubscriber < ActiveSupport::Subscriber
  def self.colorize_logging; end
  def self.colorize_logging=(obj); end
  def self.flush_all!; end
  def self.log_subscribers; end
  def self.logger; end
  def self.logger=(arg0); end
end
module ActiveSupport::Benchmarkable
  def benchmark(message = nil, options = nil); end
end
module ActiveSupport::Configurable
  def config; end
  extend ActiveSupport::Concern
end
class ActiveSupport::Configurable::Configuration < ActiveSupport::InheritableOptions
  def compile_methods!; end
  def self.compile_methods!(keys); end
end
module ActiveSupport::Configurable::ClassMethods
  def config; end
  def config_accessor(*names); end
  def configure; end
end
module ActiveSupport::Testing
end
module ActiveSupport::Testing::TaggedLogging
  def before_setup; end
  def tagged_logger; end
  def tagged_logger=(arg0); end
end
module ActiveSupport::Testing::SetupAndTeardown
  def after_teardown; end
  def before_setup; end
  extend ActiveSupport::Concern
end
module ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  def setup(*args, &block); end
  def teardown(*args, &block); end
end
module ActiveSupport::Testing::Assertions
  def assert_difference(expression, difference = nil, message = nil, &block); end
  def assert_no_difference(expression, message = nil, &block); end
  def assert_not(object, message = nil); end
end
module ActiveSupport::Testing::Deprecation
  def assert_deprecated(match = nil, &block); end
  def assert_not_deprecated(&block); end
  def collect_deprecations; end
end
module ActiveSupport::Testing::Declarative
  def test(name, &block); end
end
module ActiveSupport::Testing::Isolation
  def _run_class_setup; end
  def run; end
  def self.forking_env?; end
  def self.included(klass); end
  include ActiveSupport::Testing::Isolation::Forking
end
module ActiveSupport::Testing::Isolation::Forking
  def run_in_isolation(&blk); end
end
module ActiveSupport::Testing::Isolation::Subprocess
  def run_in_isolation(&blk); end
end
module ActiveSupport::Testing::ConstantLookup
  extend ActiveSupport::Concern
end
module ActiveSupport::Testing::ConstantLookup::ClassMethods
  def determine_constant_from_test_name(test_name); end
end
class ActiveSupport::Testing::SimpleStubs
  def initialize; end
  def stub_object(object, method_name, &block); end
  def unstub_all!; end
  def unstub_object(stub); end
end
class ActiveSupport::Testing::SimpleStubs::Stub < Struct
  def method_name; end
  def method_name=(_); end
  def object; end
  def object=(_); end
  def original_method; end
  def original_method=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
module ActiveSupport::Testing::TimeHelpers
  def simple_stubs; end
  def travel(duration, &block); end
  def travel_back; end
  def travel_to(date_or_time); end
end
class ActiveSupport::TestCase < Minitest::Test
  def _run_setup_callbacks(&block); end
  def _run_teardown_callbacks(&block); end
  def _setup_callbacks; end
  def _setup_callbacks?; end
  def _teardown_callbacks; end
  def _teardown_callbacks?; end
  def assert_no_match(matcher, obj, msg = nil); end
  def assert_not_empty(obj, msg = nil); end
  def assert_not_equal(exp, act, msg = nil); end
  def assert_not_in_delta(exp, act, delta = nil, msg = nil); end
  def assert_not_in_epsilon(a, b, epsilon = nil, msg = nil); end
  def assert_not_includes(collection, obj, msg = nil); end
  def assert_not_instance_of(cls, obj, msg = nil); end
  def assert_not_kind_of(cls, obj, msg = nil); end
  def assert_not_nil(obj, msg = nil); end
  def assert_not_operator(o1, op, o2 = nil, msg = nil); end
  def assert_not_predicate(o1, op, msg = nil); end
  def assert_not_respond_to(obj, meth, msg = nil); end
  def assert_not_same(exp, act, msg = nil); end
  def assert_nothing_raised(*args); end
  def assert_raise(*exp); end
  def method_name; end
  def self._setup_callbacks; end
  def self._setup_callbacks=(val); end
  def self._setup_callbacks?; end
  def self._teardown_callbacks; end
  def self._teardown_callbacks=(val); end
  def self._teardown_callbacks?; end
  def self.my_tests_are_order_dependent!; end
  def self.test_order; end
  def self.test_order=(new_order); end
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  extend ActiveSupport::Testing::Declarative
  extend ActiveSupport::Testing::SetupAndTeardown::ClassMethods
  include ActiveSupport::Callbacks
  include ActiveSupport::Testing::Assertions
  include ActiveSupport::Testing::Deprecation
  include ActiveSupport::Testing::SetupAndTeardown
  include ActiveSupport::Testing::TaggedLogging
  include ActiveSupport::Testing::TimeHelpers
end
class ActiveSupport::BacktraceCleaner
  def add_filter(&block); end
  def add_silencer(&block); end
  def clean(backtrace, kind = nil); end
  def filter(backtrace, kind = nil); end
  def filter_backtrace(backtrace); end
  def initialize; end
  def noise(backtrace); end
  def remove_filters!; end
  def remove_silencers!; end
  def silence(backtrace); end
end
module Digest
end
module Digest::UUID
  def self.uuid_from_hash(hash_class, uuid_namespace, name); end
  def self.uuid_v3(uuid_namespace, name); end
  def self.uuid_v4; end
  def self.uuid_v5(uuid_namespace, name); end
end
