# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/web-console/all/web-console.rbi
#
# web-console-2.3.0
class Exception
  def bindings; end
  def set_backtrace_with_binding_of_caller(*args); end
  def set_backtrace_without_binding_of_caller(arg0); end
end
module WebConsole
  def logger; end
  def logger=(obj); end
  def self.logger; end
  def self.logger=(obj); end
end
class WebConsole::Railtie < Rails::Railtie
end
class WebConsole::Error < StandardError
end
class WebConsole::DoubleRenderError < WebConsole::Error
end
module WebConsole::Helper
  def console(binding = nil); end
end
class WebConsole::Evaluator
  def cleaner; end
  def eval(input); end
  def format_exception(exc); end
  def initialize(binding = nil); end
  def self.cleaner; end
end
class WebConsole::Session
  def eval(input); end
  def id; end
  def initialize(bindings); end
  def inmemory_storage; end
  def self.find(id); end
  def self.from_binding(binding); end
  def self.from_exception(exc); end
  def self.inmemory_storage; end
  def store_into_memory; end
  def switch_binding_to(index); end
end
class WebConsole::Template
  def initialize(env, session); end
  def render(template); end
  def self.template_paths; end
  def self.template_paths=(obj); end
  def template_paths; end
  def template_paths=(obj); end
end
class WebConsole::Middleware
  def acceptable_content_type?(headers); end
  def binding_change_re; end
  def call(env); end
  def call_app(env); end
  def change_stack_trace(id, request); end
  def create_regular_or_whiny_request(env); end
  def id_for_repl_session_stack_frame_change(request); end
  def id_for_repl_session_update(request); end
  def initialize(app); end
  def json_response(opts = nil); end
  def json_response_with_session(id, request, opts = nil); end
  def mount_point; end
  def mount_point=(obj); end
  def repl_sessions_re; end
  def respond_with_unacceptable_request; end
  def respond_with_unavailable_session(id); end
  def self.mount_point; end
  def self.mount_point=(obj); end
  def self.whiny_requests; end
  def self.whiny_requests=(obj); end
  def update_re; end
  def update_repl_session(id, request); end
  def whiny_requests; end
  def whiny_requests=(obj); end
end
class WebConsole::Whitelist
  def coerce_network_to_ipaddr(network); end
  def human_readable_ipaddr(ipaddr); end
  def include?(network); end
  def initialize(networks = nil); end
  def normalize_networks(networks); end
  def to_s; end
end
class WebConsole::Request < ActionDispatch::Request
  def acceptable?; end
  def from_whitelited_ip?; end
  def self.whitelisted_ips; end
  def self.whitelisted_ips=(obj); end
  def strict_remote_ip; end
  def whitelisted_ips; end
  def whitelisted_ips=(obj); end
end
class WebConsole::Request::GetSecureIp < ActionDispatch::RemoteIp::GetIp
  def filter_proxies(ips); end
  def initialize(req, proxies); end
end
class Anonymous_Struct_21 < Struct
  def body; end
  def body=(_); end
  def headers; end
  def headers=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def status; end
  def status=(_); end
end
class WebConsole::Response < Anonymous_Struct_21
  def finish; end
  def write(content); end
end
class WebConsole::View < ActionView::Base
  def only_on_error_page(*args); end
  def render_inlined_string(template); end
  def render_javascript(template); end
  def t(key, options = nil); end
end
class WebConsole::WhinyRequest < SimpleDelegator
  def from_whitelited_ip?; end
  def logger; end
  def request; end
  def whine_unless(condition); end
end
class ActionDispatch::DebugExceptions
  def render_exception_with_web_console(request, exception); end
  def render_exception_without_web_console(env, exception); end
end
