# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rspec-support/all/rspec-support.rbi
#
# rspec-support-3.8.2
module RSpec
  extend RSpec::Support::Warnings
end
module RSpec::Support
  def self.class_of(object); end
  def self.define_optimized_require_for_rspec(lib, &require_relative); end
  def self.failure_notifier; end
  def self.failure_notifier=(callable); end
  def self.method_handle_for(object, method_name); end
  def self.notify_failure(failure, options = nil); end
  def self.require_rspec_support(f); end
  def self.thread_local_data; end
  def self.warning_notifier; end
  def self.warning_notifier=(arg0); end
  def self.with_failure_notifier(callable); end
end
module RSpec::Support::Version
end
class RSpec::Support::ComparableVersion
  def <=>(other); end
  def initialize(string); end
  def segments; end
  def string; end
  include Comparable
end
module RSpec::Support::OS
  def self.windows?; end
  def self.windows_file_path?; end
  def windows?; end
  def windows_file_path?; end
end
module RSpec::Support::Ruby
  def jruby?; end
  def jruby_9000?; end
  def jruby_version; end
  def mri?; end
  def non_mri?; end
  def rbx?; end
  def self.jruby?; end
  def self.jruby_9000?; end
  def self.jruby_version; end
  def self.mri?; end
  def self.non_mri?; end
  def self.rbx?; end
end
module RSpec::Support::RubyFeatures
  def caller_locations_supported?; end
  def fork_supported?; end
  def kw_args_supported?; end
  def module_prepends_supported?; end
  def module_refinement_supported?; end
  def optional_and_splat_args_supported?; end
  def required_kw_args_supported?; end
  def ripper_supported?; end
  def self.caller_locations_supported?; end
  def self.fork_supported?; end
  def self.kw_args_supported?; end
  def self.module_prepends_supported?; end
  def self.module_refinement_supported?; end
  def self.optional_and_splat_args_supported?; end
  def self.required_kw_args_supported?; end
  def self.ripper_supported?; end
  def self.supports_exception_cause?; end
  def self.supports_rebinding_module_methods?; end
  def supports_exception_cause?; end
  def supports_rebinding_module_methods?; end
end
module RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue
  def self.===(exception); end
end
class RSpec::CallerFilter
  def self.first_non_rspec_line(skip_frames = nil, increment = nil); end
end
module RSpec::Support::Warnings
  def deprecate(deprecated, options = nil); end
  def warn_deprecation(message, options = nil); end
  def warn_with(message, options = nil); end
  def warning(text, options = nil); end
end
class RSpec::Support::EncodedString
  def <<(string); end
  def ==(*args, &block); end
  def detect_source_encoding(string); end
  def empty?(*args, &block); end
  def encoding(*args, &block); end
  def eql?(*args, &block); end
  def initialize(string, encoding = nil); end
  def lines(*args, &block); end
  def matching_encoding(string); end
  def remove_invalid_bytes(string); end
  def self.pick_encoding(source_a, source_b); end
  def source_encoding; end
  def split(regex_or_string); end
  def to_s; end
  def to_str; end
end
class RSpec::Support::ReentrantMutex
  def enter; end
  def exit; end
  def initialize; end
  def synchronize; end
end
class RSpec::Support::DirectoryMaker
  def self.directory_exists?(dirname); end
  def self.generate_path(stack, part); end
  def self.generate_stack(path); end
  def self.mkdir_p(path); end
end
module RSpec::Support::RecursiveConstMethods
  def const_defined_on?(mod, const_name); end
  def constants_defined_on(mod); end
  def get_const_defined_on(mod, const_name); end
  def normalize_const_name(const_name); end
  def recursive_const_defined?(const_name); end
  def recursive_const_get(const_name); end
end
