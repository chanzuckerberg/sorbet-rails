# This is an autogenerated file for dynamic methods in Wizard
# Please rerun rake rails_rbi:models[Wizard] to regenerate.

# typed: strong
module Wizard::EnumInstanceMethods
  extend T::Sig

  sig { returns(T::Boolean) }
  def nimbus?; end

  sig { void }
  def nimbus!; end

  sig { returns(T::Boolean) }
  def firebolt?; end

  sig { void }
  def firebolt!; end

  sig { returns(T::Boolean) }
  def green?; end

  sig { void }
  def green!; end

  sig { returns(T::Boolean) }
  def blue?; end

  sig { void }
  def blue!; end

  sig { returns(T::Boolean) }
  def black?; end

  sig { void }
  def black!; end

  sig { returns(T::Boolean) }
  def blonde?; end

  sig { void }
  def blonde!; end

  sig { returns(T::Boolean) }
  def Gryffindor?; end

  sig { void }
  def Gryffindor!; end

  sig { returns(T::Boolean) }
  def Hufflepuff?; end

  sig { void }
  def Hufflepuff!; end

  sig { returns(T::Boolean) }
  def Ravenclaw?; end

  sig { void }
  def Ravenclaw!; end

  sig { returns(T::Boolean) }
  def Slytherin?; end

  sig { void }
  def Slytherin!; end

  sig { returns(T::Boolean) }
  def Hagrid?; end

  sig { void }
  def Hagrid!; end

  sig { returns(T::Boolean) }
  def keeper?; end

  sig { void }
  def keeper!; end

  sig { returns(T::Boolean) }
  def seeker?; end

  sig { void }
  def seeker!; end

  sig { returns(T::Boolean) }
  def beater?; end

  sig { void }
  def beater!; end

  sig { returns(T::Boolean) }
  def chaser?; end

  sig { void }
  def chaser!; end

  sig { returns(T::Boolean) }
  def brown?; end

  sig { void }
  def brown!; end
end

module Wizard::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Wizard::GeneratedAssociationMethods
  extend T::Sig

  sig { returns(T.nilable(T.untyped)) }
  def school; end

  sig { params(value: T.nilable(T.untyped)).void }
  def school=(value); end

  sig { returns(ActiveRecord::Associations::CollectionProxy) }
  def spell_books; end

  sig { params(value: T::Enumerable[T.untyped]).void }
  def spell_books=(value); end

  sig { returns(T.nilable(::Wand)) }
  def wand; end

  sig { params(value: T.nilable(::Wand)).void }
  def wand=(value); end
end

module Wizard::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Wizard]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Wizard]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Wizard]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Wizard)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Wizard) }
  def find_by_id!(id); end
end

class Wizard < ApplicationRecord
  include Wizard::EnumInstanceMethods
  include Wizard::GeneratedAssociationMethods
  extend Wizard::CustomFinderMethods
  extend T::Sig
  extend T::Generic

  sig { returns(T::Hash[T.any(String, Symbol), String]) }
  def self.brooms; end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.eye_colors; end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.hair_colors; end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.houses; end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.professors; end

  sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
  def self.quidditch_positions; end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.Gryffindor(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.Hagrid(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.Hufflepuff(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.Ravenclaw(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.Slytherin(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.black_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.blonde_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.broom_firebolt(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.broom_nimbus(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.brown_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.color_blue_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.color_brown_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.color_green_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.quidditch_beater(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.quidditch_chaser(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.quidditch_keeper(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.quidditch_seeker(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.recent(*args); end

  sig { returns(Wizard::ActiveRecord_Relation) }
  def self.all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Wizard::ActiveRecord_Relation) }
  def self.unscoped(&block); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.select(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.order(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.reorder(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.group(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.limit(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.offset(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.left_joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.where(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.rewhere(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.preload(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.eager_load(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.includes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.from(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.lock(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.readonly(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.or(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.having(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.create_with(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.distinct(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.references(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.none(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.unscope(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def self.except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Wizard::ActiveRecord_Relation) }
  def self.extending(*args, &block); end

  sig { params(args: T.untyped).returns(Wizard) }
  def self.find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Wizard)) }
  def self.find_by(*args); end

  sig { params(args: T.untyped).returns(Wizard) }
  def self.find_by!(*args); end

  sig { returns(T.nilable(Wizard)) }
  def self.first; end

  sig { returns(Wizard) }
  def self.first!; end

  sig { returns(T.nilable(Wizard)) }
  def self.second; end

  sig { returns(Wizard) }
  def self.second!; end

  sig { returns(T.nilable(Wizard)) }
  def self.third; end

  sig { returns(Wizard) }
  def self.third!; end

  sig { returns(T.nilable(Wizard)) }
  def self.third_to_last; end

  sig { returns(Wizard) }
  def self.third_to_last!; end

  sig { returns(T.nilable(Wizard)) }
  def self.second_to_last; end

  sig { returns(Wizard) }
  def self.second_to_last!; end

  sig { returns(T.nilable(Wizard)) }
  def self.last; end

  sig { returns(Wizard) }
  def self.last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def self.exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.one?(*args); end

  sig { params(attributes: T.untyped, block: T.untyped).returns(Wizard) }
  def self.create(attributes = nil, &block); end

  sig { params(attributes: T.untyped, block: T.untyped).returns(Wizard) }
  def self.create!(attributes = nil, &block); end

  sig { params(attributes: T.untyped, block: T.untyped).returns(Wizard) }
  def self.new(attributes = nil, &block); end
end

class Wizard::ActiveRecord_Relation < ActiveRecord::Relation
  include Wizard::ActiveRelation_WhereNot
  include Wizard::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Wizard)

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def Gryffindor(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def Hagrid(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def Hufflepuff(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def Ravenclaw(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def Slytherin(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def black_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def blonde_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def broom_firebolt(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def broom_nimbus(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def brown_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def color_blue_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def color_brown_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def color_green_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def quidditch_beater(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def quidditch_chaser(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def quidditch_keeper(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def quidditch_seeker(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def recent(*args); end

  sig { returns(Wizard::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Wizard::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Wizard::ActiveRecord_Relation) }
  def extending(*args, &block); end
end

class Wizard::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Wizard::ActiveRelation_WhereNot
  include Wizard::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Wizard)

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Gryffindor(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Hagrid(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Hufflepuff(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Ravenclaw(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Slytherin(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def black_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def blonde_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def broom_firebolt(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def broom_nimbus(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def brown_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def color_blue_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def color_brown_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def color_green_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def quidditch_beater(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def quidditch_chaser(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def quidditch_keeper(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def quidditch_seeker(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def recent(*args); end

  sig { returns(Wizard::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Wizard::ActiveRecord_AssociationRelation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Wizard::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped).returns(Wizard) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Wizard)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(Wizard) }
  def find_by!(*args); end

  sig { returns(T.nilable(Wizard)) }
  def first; end

  sig { returns(Wizard) }
  def first!; end

  sig { returns(T.nilable(Wizard)) }
  def second; end

  sig { returns(Wizard) }
  def second!; end

  sig { returns(T.nilable(Wizard)) }
  def third; end

  sig { returns(Wizard) }
  def third!; end

  sig { returns(T.nilable(Wizard)) }
  def third_to_last; end

  sig { returns(Wizard) }
  def third_to_last!; end

  sig { returns(T.nilable(Wizard)) }
  def second_to_last; end

  sig { returns(Wizard) }
  def second_to_last!; end

  sig { returns(T.nilable(Wizard)) }
  def last; end

  sig { returns(Wizard) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { override.params(block: T.proc.params(e: Wizard).void).returns(T::Array[Wizard]) }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[Wizard]) }
  def flatten(level); end

  sig { returns(T::Array[Wizard]) }
  def to_a; end

  sig do
    type_parameters(:U).params(
        blk: T.proc.params(arg0: Elem).returns(T.type_parameter(:U)),
    )
    .returns(T::Array[T.type_parameter(:U)])
  end
  def map(&blk); end
end

class Wizard::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Wizard::CustomFinderMethods
  include Enumerable
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Wizard)

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Gryffindor(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Hagrid(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Hufflepuff(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Ravenclaw(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def Slytherin(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def black_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def blonde_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def broom_firebolt(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def broom_nimbus(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def brown_hair(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def color_blue_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def color_brown_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def color_green_eyes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def quidditch_beater(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def quidditch_chaser(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def quidditch_keeper(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def quidditch_seeker(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def recent(*args); end

  sig { returns(Wizard::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Wizard::ActiveRecord_AssociationRelation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Wizard::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Wizard::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped).returns(Wizard) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Wizard)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(Wizard) }
  def find_by!(*args); end

  sig { returns(T.nilable(Wizard)) }
  def first; end

  sig { returns(Wizard) }
  def first!; end

  sig { returns(T.nilable(Wizard)) }
  def second; end

  sig { returns(Wizard) }
  def second!; end

  sig { returns(T.nilable(Wizard)) }
  def third; end

  sig { returns(Wizard) }
  def third!; end

  sig { returns(T.nilable(Wizard)) }
  def third_to_last; end

  sig { returns(Wizard) }
  def third_to_last!; end

  sig { returns(T.nilable(Wizard)) }
  def second_to_last; end

  sig { returns(Wizard) }
  def second_to_last!; end

  sig { returns(T.nilable(Wizard)) }
  def last; end

  sig { returns(Wizard) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { override.params(block: T.proc.params(e: Wizard).void).returns(T::Array[Wizard]) }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[Wizard]) }
  def flatten(level); end

  sig { returns(T::Array[Wizard]) }
  def to_a; end

  sig do
    type_parameters(:U).params(
        blk: T.proc.params(arg0: Elem).returns(T.type_parameter(:U)),
    )
    .returns(T::Array[T.type_parameter(:U)])
  end
  def map(&blk); end

  sig { params(records: T.any(Wizard, T::Array[Wizard])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Wizard, T::Array[Wizard])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Wizard, T::Array[Wizard])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Wizard, T::Array[Wizard])).returns(T.self_type) }
  def concat(*records); end
end
